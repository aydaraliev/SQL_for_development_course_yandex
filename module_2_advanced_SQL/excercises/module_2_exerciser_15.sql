/* 1. Для анализа данных разные сотрудники магазина Chinook регулярно просматривают
сумму продаж за прошедшие годы. Так как новых продаж в предшествующих годах быть уже
не может, для удобства работы со статистикой создайте материализованное представление
total_year_income из двух столбцов:
    year — рассматриваемый год, тип данных integer.
    total_income — сумма по столбцу total из таблицы invoice за указанный год,
                   тип данных numeric.
Данные отсортируйте по году в порядке возрастания. */

CREATE MATERIALIZED VIEW total_year_income AS
SELECT EXTRACT(YEAR FROM invoice_date::date) AS year,
       SUM(total)                            AS total_income
FROM invoice
GROUP BY EXTRACT(YEAR FROM invoice_date::date)
ORDER BY year;

SELECT *
FROM total_year_income;

/* 2. Вы работаете в стартапе интернет-сервиса «Мой тёзка», который позволит людям находить
своих полных тёзок — людей с совпадающими фамилией, именем, отчеством. Just for fun!
Для запуска рекламной кампании стартап собирает по всей стране контактные данные людей,
у которых ФИО образовано от одного имени. Например, Иванов Иван Иванович или Петров Пётр
Петрович. В БД компании уже есть данные по нескольким таким людям. Они хранятся в таблице
namesakes. Также есть материализованное представление namesakes_count, в котором посчитано
количество полных тёзок для каждого ФИО. Сегодня утром радостный менеджер сообщил, что нашёл
ещё одного Иванова Иван Ивановича, согласного участвовать в рекламной кампании. Ваша
задача внести его данные в таблицу namesakes и сделать так, чтобы все, кто пользуются
материализованным представлением namesakes_count, получали результаты с учётом этой новой
строки. */

INSERT INTO namesakes(name, phone, city)
VALUES ('Иванов Иван Иванович', '+74952128506', 'Москва');

REFRESH MATERIALIZED VIEW namesakes_count;

SELECT *
FROM namesakes_count;

/* 3. Концепция рекламной кампании сервиса «Мой тёзка» резко поменялась, теперь решили
просто собрать людей из таблицы namesakes в одном месте и провести с ними интервью.
Но не все готовы ехать в другой город для съёмок, а дополнительного бюджета на билеты
у компании нет. Поэтому нужно найти город, в котором больше всего таких людей.
К этой информации будут часто обращаться, поэтому создайте материализованное представление
person_city_count, в котором должна храниться информация о городе city и количестве человек
person_count из таблицы namesakes в этом городе. Отсортируйте данные по убыванию количества
человек в городе. Старое представление namesakes_count уже не понадобится, удалите его. */

DROP MATERIALIZED VIEW namesakes_count;

CREATE MATERIALIZED VIEW person_city_count AS
SELECT city,
       COUNT(name) AS person_count
FROM namesakes
GROUP BY city
ORDER BY person_count DESC;

SELECT *
FROM person_city_count;